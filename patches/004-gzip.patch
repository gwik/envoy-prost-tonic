diff --git b/gen/envoy.extensions.compression.gzip.compressor.v3.rs a/gen/envoy.extensions.compression.gzip.compressor.v3.rs
index 3e83ef8..26aeec1 100644
--- b/gen/envoy.extensions.compression.gzip.compressor.v3.rs
+++ a/gen/envoy.extensions.compression.gzip.compressor.v3.rs
@@ -14,7 +14,7 @@ pub struct Gzip {
     /// "DEFAULT_COMPRESSION" provides an optimal result between speed and compression. According
     /// to zlib's manual this level gives the same result as "COMPRESSION_LEVEL_6".
     /// This field will be set to "DEFAULT_COMPRESSION" if not specified.
-    #[prost(enumeration = "gzip::CompressionLevel", tag = "2")]
+    #[prost(enumeration = "gzip_::CompressionLevel", tag = "2")]
     pub compression_level: i32,
     /// A value used for selecting the zlib compression strategy which is directly related to the
     /// characteristics of the content. Most of the time "DEFAULT_STRATEGY" will be the best choice,
@@ -22,7 +22,7 @@ pub struct Gzip {
     /// changing this parameter might produce better results. For example, run-length encoding (RLE)
     /// is typically used when the content is known for having sequences which same data occurs many
     /// consecutive times. For more information about each strategy, please refer to zlib manual.
-    #[prost(enumeration = "gzip::CompressionStrategy", tag = "3")]
+    #[prost(enumeration = "gzip_::CompressionStrategy", tag = "3")]
     pub compression_strategy: i32,
     /// Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.
     /// Larger window results in better compression at the expense of memory usage. The default is 12
@@ -37,20 +37,10 @@ pub struct Gzip {
     pub chunk_size: ::core::option::Option<::pbjson_types::UInt32Value>,
 }
 /// Nested message and enum types in `Gzip`.
-pub mod gzip {
+pub mod gzip_ {
     /// All the values of this enumeration translate directly to zlib's compression strategies.
     /// For more information about each strategy, please refer to zlib manual.
-    #[derive(
-        Clone,
-        Copy,
-        Debug,
-        PartialEq,
-        Eq,
-        Hash,
-        PartialOrd,
-        Ord,
-        ::prost::Enumeration
-    )]
+    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
     #[repr(i32)]
     pub enum CompressionStrategy {
         DefaultStrategy = 0,
@@ -85,17 +75,7 @@ pub mod gzip {
             }
         }
     }
-    #[derive(
-        Clone,
-        Copy,
-        Debug,
-        PartialEq,
-        Eq,
-        Hash,
-        PartialOrd,
-        Ord,
-        ::prost::Enumeration
-    )]
+    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
     #[repr(i32)]
     pub enum CompressionLevel {
         DefaultCompression = 0,
@@ -462,4 +442,4 @@ pub const FILE_DESCRIPTOR_SET: &[u8] = &[
     0x08, 0x05, 0x12, 0x03, 0x4d, 0x2e, 0x5e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
 ];
 include!("envoy.extensions.compression.gzip.compressor.v3.serde.rs");
-// @@protoc_insertion_point(module)
\ No newline at end of file
+// @@protoc_insertion_point(module)
diff --git b/gen/envoy.extensions.compression.gzip.compressor.v3.serde.rs a/gen/envoy.extensions.compression.gzip.compressor.v3.serde.rs
index f93b40d..258e19e 100644
--- b/gen/envoy.extensions.compression.gzip.compressor.v3.serde.rs
+++ a/gen/envoy.extensions.compression.gzip.compressor.v3.serde.rs
@@ -22,18 +22,26 @@ impl serde::Serialize for Gzip {
         if self.chunk_size.is_some() {
             len += 1;
         }
-        let mut struct_ser = serializer.serialize_struct("envoy.extensions.compression.gzip.compressor.v3.Gzip", len)?;
+        let mut struct_ser = serializer
+            .serialize_struct("envoy.extensions.compression.gzip.compressor.v3.Gzip", len)?;
         if let Some(v) = self.memory_level.as_ref() {
             struct_ser.serialize_field("memoryLevel", v)?;
         }
         if self.compression_level != 0 {
-            let v = gzip::CompressionLevel::from_i32(self.compression_level)
-                .ok_or_else(|| serde::ser::Error::custom(format!("Invalid variant {}", self.compression_level)))?;
+            let v = gzip_::CompressionLevel::from_i32(self.compression_level).ok_or_else(|| {
+                serde::ser::Error::custom(format!("Invalid variant {}", self.compression_level))
+            })?;
             struct_ser.serialize_field("compressionLevel", &v)?;
         }
         if self.compression_strategy != 0 {
-            let v = gzip::CompressionStrategy::from_i32(self.compression_strategy)
-                .ok_or_else(|| serde::ser::Error::custom(format!("Invalid variant {}", self.compression_strategy)))?;
+            let v = gzip_::CompressionStrategy::from_i32(self.compression_strategy).ok_or_else(
+                || {
+                    serde::ser::Error::custom(format!(
+                        "Invalid variant {}",
+                        self.compression_strategy
+                    ))
+                },
+            )?;
             struct_ser.serialize_field("compressionStrategy", &v)?;
         }
         if let Some(v) = self.window_bits.as_ref() {
@@ -82,7 +90,10 @@ impl<'de> serde::Deserialize<'de> for Gzip {
                 impl<'de> serde::de::Visitor<'de> for GeneratedVisitor {
                     type Value = GeneratedField;
 
-                    fn expecting(&self, formatter: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
+                    fn expecting(
+                        &self,
+                        formatter: &mut std::fmt::Formatter<'_>,
+                    ) -> std::fmt::Result {
                         write!(formatter, "expected one of: {:?}", &FIELDS)
                     }
 
@@ -93,8 +104,12 @@ impl<'de> serde::Deserialize<'de> for Gzip {
                     {
                         match value {
                             "memoryLevel" | "memory_level" => Ok(GeneratedField::MemoryLevel),
-                            "compressionLevel" | "compression_level" => Ok(GeneratedField::CompressionLevel),
-                            "compressionStrategy" | "compression_strategy" => Ok(GeneratedField::CompressionStrategy),
+                            "compressionLevel" | "compression_level" => {
+                                Ok(GeneratedField::CompressionLevel)
+                            }
+                            "compressionStrategy" | "compression_strategy" => {
+                                Ok(GeneratedField::CompressionStrategy)
+                            }
                             "windowBits" | "window_bits" => Ok(GeneratedField::WindowBits),
                             "chunkSize" | "chunk_size" => Ok(GeneratedField::ChunkSize),
                             _ => Err(serde::de::Error::unknown_field(value, FIELDS)),
@@ -113,8 +128,8 @@ impl<'de> serde::Deserialize<'de> for Gzip {
             }
 
             fn visit_map<V>(self, mut map: V) -> std::result::Result<Gzip, V::Error>
-                where
-                    V: serde::de::MapAccess<'de>,
+            where
+                V: serde::de::MapAccess<'de>,
             {
                 let mut memory_level__ = None;
                 let mut compression_level__ = None;
@@ -133,13 +148,17 @@ impl<'de> serde::Deserialize<'de> for Gzip {
                             if compression_level__.is_some() {
                                 return Err(serde::de::Error::duplicate_field("compressionLevel"));
                             }
-                            compression_level__ = Some(map.next_value::<gzip::CompressionLevel>()? as i32);
+                            compression_level__ =
+                                Some(map.next_value::<gzip_::CompressionLevel>()? as i32);
                         }
                         GeneratedField::CompressionStrategy => {
                             if compression_strategy__.is_some() {
-                                return Err(serde::de::Error::duplicate_field("compressionStrategy"));
+                                return Err(serde::de::Error::duplicate_field(
+                                    "compressionStrategy",
+                                ));
                             }
-                            compression_strategy__ = Some(map.next_value::<gzip::CompressionStrategy>()? as i32);
+                            compression_strategy__ =
+                                Some(map.next_value::<gzip_::CompressionStrategy>()? as i32);
                         }
                         GeneratedField::WindowBits => {
                             if window_bits__.is_some() {
@@ -164,10 +183,14 @@ impl<'de> serde::Deserialize<'de> for Gzip {
                 })
             }
         }
-        deserializer.deserialize_struct("envoy.extensions.compression.gzip.compressor.v3.Gzip", FIELDS, GeneratedVisitor)
+        deserializer.deserialize_struct(
+            "envoy.extensions.compression.gzip.compressor.v3.Gzip",
+            FIELDS,
+            GeneratedVisitor,
+        )
     }
 }
-impl serde::Serialize for gzip::CompressionLevel {
+impl serde::Serialize for gzip_::CompressionLevel {
     #[allow(deprecated)]
     fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
     where
@@ -176,7 +199,6 @@ impl serde::Serialize for gzip::CompressionLevel {
         let variant = match self {
             Self::DefaultCompression => "DEFAULT_COMPRESSION",
             Self::BestSpeed => "BEST_SPEED",
-            Self::CompressionLevel1 => "COMPRESSION_LEVEL_1",
             Self::CompressionLevel2 => "COMPRESSION_LEVEL_2",
             Self::CompressionLevel3 => "COMPRESSION_LEVEL_3",
             Self::CompressionLevel4 => "COMPRESSION_LEVEL_4",
@@ -185,12 +207,11 @@ impl serde::Serialize for gzip::CompressionLevel {
             Self::CompressionLevel7 => "COMPRESSION_LEVEL_7",
             Self::CompressionLevel8 => "COMPRESSION_LEVEL_8",
             Self::CompressionLevel9 => "COMPRESSION_LEVEL_9",
-            Self::BestCompression => "BEST_COMPRESSION",
         };
         serializer.serialize_str(variant)
     }
 }
-impl<'de> serde::Deserialize<'de> for gzip::CompressionLevel {
+impl<'de> serde::Deserialize<'de> for gzip_::CompressionLevel {
     #[allow(deprecated)]
     fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
     where
@@ -208,13 +229,12 @@ impl<'de> serde::Deserialize<'de> for gzip::CompressionLevel {
             "COMPRESSION_LEVEL_7",
             "COMPRESSION_LEVEL_8",
             "COMPRESSION_LEVEL_9",
-            "BEST_COMPRESSION",
         ];
 
         struct GeneratedVisitor;
 
         impl<'de> serde::de::Visitor<'de> for GeneratedVisitor {
-            type Value = gzip::CompressionLevel;
+            type Value = gzip_::CompressionLevel;
 
             fn expecting(&self, formatter: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                 write!(formatter, "expected one of: {:?}", &FIELDS)
@@ -227,7 +247,7 @@ impl<'de> serde::Deserialize<'de> for gzip::CompressionLevel {
                 use std::convert::TryFrom;
                 i32::try_from(v)
                     .ok()
-                    .and_then(gzip::CompressionLevel::from_i32)
+                    .and_then(gzip_::CompressionLevel::from_i32)
                     .ok_or_else(|| {
                         serde::de::Error::invalid_value(serde::de::Unexpected::Signed(v), &self)
                     })
@@ -240,7 +260,7 @@ impl<'de> serde::Deserialize<'de> for gzip::CompressionLevel {
                 use std::convert::TryFrom;
                 i32::try_from(v)
                     .ok()
-                    .and_then(gzip::CompressionLevel::from_i32)
+                    .and_then(gzip_::CompressionLevel::from_i32)
                     .ok_or_else(|| {
                         serde::de::Error::invalid_value(serde::de::Unexpected::Unsigned(v), &self)
                     })
@@ -251,18 +271,16 @@ impl<'de> serde::Deserialize<'de> for gzip::CompressionLevel {
                 E: serde::de::Error,
             {
                 match value {
-                    "DEFAULT_COMPRESSION" => Ok(gzip::CompressionLevel::DefaultCompression),
-                    "BEST_SPEED" => Ok(gzip::CompressionLevel::BestSpeed),
-                    "COMPRESSION_LEVEL_1" => Ok(gzip::CompressionLevel::CompressionLevel1),
-                    "COMPRESSION_LEVEL_2" => Ok(gzip::CompressionLevel::CompressionLevel2),
-                    "COMPRESSION_LEVEL_3" => Ok(gzip::CompressionLevel::CompressionLevel3),
-                    "COMPRESSION_LEVEL_4" => Ok(gzip::CompressionLevel::CompressionLevel4),
-                    "COMPRESSION_LEVEL_5" => Ok(gzip::CompressionLevel::CompressionLevel5),
-                    "COMPRESSION_LEVEL_6" => Ok(gzip::CompressionLevel::CompressionLevel6),
-                    "COMPRESSION_LEVEL_7" => Ok(gzip::CompressionLevel::CompressionLevel7),
-                    "COMPRESSION_LEVEL_8" => Ok(gzip::CompressionLevel::CompressionLevel8),
-                    "COMPRESSION_LEVEL_9" => Ok(gzip::CompressionLevel::CompressionLevel9),
-                    "BEST_COMPRESSION" => Ok(gzip::CompressionLevel::BestCompression),
+                    "DEFAULT_COMPRESSION" => Ok(gzip_::CompressionLevel::DefaultCompression),
+                    "BEST_SPEED" => Ok(gzip_::CompressionLevel::BestSpeed),
+                    "COMPRESSION_LEVEL_2" => Ok(gzip_::CompressionLevel::CompressionLevel2),
+                    "COMPRESSION_LEVEL_3" => Ok(gzip_::CompressionLevel::CompressionLevel3),
+                    "COMPRESSION_LEVEL_4" => Ok(gzip_::CompressionLevel::CompressionLevel4),
+                    "COMPRESSION_LEVEL_5" => Ok(gzip_::CompressionLevel::CompressionLevel5),
+                    "COMPRESSION_LEVEL_6" => Ok(gzip_::CompressionLevel::CompressionLevel6),
+                    "COMPRESSION_LEVEL_7" => Ok(gzip_::CompressionLevel::CompressionLevel7),
+                    "COMPRESSION_LEVEL_8" => Ok(gzip_::CompressionLevel::CompressionLevel8),
+                    "COMPRESSION_LEVEL_9" => Ok(gzip_::CompressionLevel::CompressionLevel9),
                     _ => Err(serde::de::Error::unknown_variant(value, FIELDS)),
                 }
             }
@@ -270,7 +288,7 @@ impl<'de> serde::Deserialize<'de> for gzip::CompressionLevel {
         deserializer.deserialize_any(GeneratedVisitor)
     }
 }
-impl serde::Serialize for gzip::CompressionStrategy {
+impl serde::Serialize for gzip_::CompressionStrategy {
     #[allow(deprecated)]
     fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
     where
@@ -286,7 +304,7 @@ impl serde::Serialize for gzip::CompressionStrategy {
         serializer.serialize_str(variant)
     }
 }
-impl<'de> serde::Deserialize<'de> for gzip::CompressionStrategy {
+impl<'de> serde::Deserialize<'de> for gzip_::CompressionStrategy {
     #[allow(deprecated)]
     fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
     where
@@ -303,7 +321,7 @@ impl<'de> serde::Deserialize<'de> for gzip::CompressionStrategy {
         struct GeneratedVisitor;
 
         impl<'de> serde::de::Visitor<'de> for GeneratedVisitor {
-            type Value = gzip::CompressionStrategy;
+            type Value = gzip_::CompressionStrategy;
 
             fn expecting(&self, formatter: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                 write!(formatter, "expected one of: {:?}", &FIELDS)
@@ -316,7 +334,7 @@ impl<'de> serde::Deserialize<'de> for gzip::CompressionStrategy {
                 use std::convert::TryFrom;
                 i32::try_from(v)
                     .ok()
-                    .and_then(gzip::CompressionStrategy::from_i32)
+                    .and_then(gzip_::CompressionStrategy::from_i32)
                     .ok_or_else(|| {
                         serde::de::Error::invalid_value(serde::de::Unexpected::Signed(v), &self)
                     })
@@ -329,7 +347,7 @@ impl<'de> serde::Deserialize<'de> for gzip::CompressionStrategy {
                 use std::convert::TryFrom;
                 i32::try_from(v)
                     .ok()
-                    .and_then(gzip::CompressionStrategy::from_i32)
+                    .and_then(gzip_::CompressionStrategy::from_i32)
                     .ok_or_else(|| {
                         serde::de::Error::invalid_value(serde::de::Unexpected::Unsigned(v), &self)
                     })
@@ -340,11 +358,11 @@ impl<'de> serde::Deserialize<'de> for gzip::CompressionStrategy {
                 E: serde::de::Error,
             {
                 match value {
-                    "DEFAULT_STRATEGY" => Ok(gzip::CompressionStrategy::DefaultStrategy),
-                    "FILTERED" => Ok(gzip::CompressionStrategy::Filtered),
-                    "HUFFMAN_ONLY" => Ok(gzip::CompressionStrategy::HuffmanOnly),
-                    "RLE" => Ok(gzip::CompressionStrategy::Rle),
-                    "FIXED" => Ok(gzip::CompressionStrategy::Fixed),
+                    "DEFAULT_STRATEGY" => Ok(gzip_::CompressionStrategy::DefaultStrategy),
+                    "FILTERED" => Ok(gzip_::CompressionStrategy::Filtered),
+                    "HUFFMAN_ONLY" => Ok(gzip_::CompressionStrategy::HuffmanOnly),
+                    "RLE" => Ok(gzip_::CompressionStrategy::Rle),
+                    "FIXED" => Ok(gzip_::CompressionStrategy::Fixed),
                     _ => Err(serde::de::Error::unknown_variant(value, FIELDS)),
                 }
             }
