diff --git a/gen/envoy.api.v2.rs b/gen/envoy.api.v2.rs
index 330041c..75f384b 100644
--- a/gen/envoy.api.v2.rs
+++ b/gen/envoy.api.v2.rs
@@ -159,7 +159,7 @@ pub struct Cluster {
     ///
     /// [#comment:TODO(incfly): add a detailed architecture doc on intended usage.]
     #[prost(message, repeated, tag="43")]
-    pub transport_socket_matches: ::prost::alloc::vec::Vec<cluster::TransportSocketMatch>,
+    pub transport_socket_matches: ::prost::alloc::vec::Vec<cluster_::TransportSocketMatch>,
     /// Supplies the name of the cluster which must be unique across all clusters.
     /// The cluster name is used when emitting
     /// :ref:`statistics <config_cluster_manager_cluster_stats>` if :ref:`alt_stat_name
@@ -175,7 +175,7 @@ pub struct Cluster {
     pub alt_stat_name: ::prost::alloc::string::String,
     /// Configuration to use for EDS updates for the Cluster.
     #[prost(message, optional, tag="3")]
-    pub eds_cluster_config: ::core::option::Option<cluster::EdsClusterConfig>,
+    pub eds_cluster_config: ::core::option::Option<cluster_::EdsClusterConfig>,
     /// The timeout for new network connections to hosts in the cluster.
     #[prost(message, optional, tag="4")]
     pub connect_timeout: ::core::option::Option<::pbjson_types::Duration>,
@@ -185,7 +185,7 @@ pub struct Cluster {
     pub per_connection_buffer_limit_bytes: ::core::option::Option<::pbjson_types::UInt32Value>,
     /// The :ref:`load balancer type <arch_overview_load_balancing_types>` to use
     /// when picking a host in the cluster.
-    #[prost(enumeration="cluster::LbPolicy", tag="6")]
+    #[prost(enumeration="cluster_::LbPolicy", tag="6")]
     pub lb_policy: i32,
     /// If the service discovery type is
     /// :ref:`STATIC<envoy_api_enum_value_Cluster.DiscoveryType.STATIC>`,
@@ -289,7 +289,7 @@ pub struct Cluster {
     /// :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>` this setting is
     /// ignored.
     #[prost(message, optional, tag="44")]
-    pub dns_failure_refresh_rate: ::core::option::Option<cluster::RefreshRate>,
+    pub dns_failure_refresh_rate: ::core::option::Option<cluster_::RefreshRate>,
     /// Optional configuration for setting cluster's DNS refresh rate. If the value is set to true,
     /// cluster's DNS refresh rate will be set to resource record's TTL which comes from DNS
     /// resolution.
@@ -298,7 +298,7 @@ pub struct Cluster {
     /// The DNS IP address resolution policy. If this setting is not specified, the
     /// value defaults to
     /// :ref:`AUTO<envoy_api_enum_value_Cluster.DnsLookupFamily.AUTO>`.
-    #[prost(enumeration="cluster::DnsLookupFamily", tag="17")]
+    #[prost(enumeration="cluster_::DnsLookupFamily", tag="17")]
     pub dns_lookup_family: i32,
     /// If DNS resolvers are specified and the cluster type is either
     /// :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>`,
@@ -349,10 +349,10 @@ pub struct Cluster {
     pub upstream_bind_config: ::core::option::Option<core::BindConfig>,
     /// Configuration for load balancing subsetting.
     #[prost(message, optional, tag="22")]
-    pub lb_subset_config: ::core::option::Option<cluster::LbSubsetConfig>,
+    pub lb_subset_config: ::core::option::Option<cluster_::LbSubsetConfig>,
     /// Common configuration for all load balancer implementations.
     #[prost(message, optional, tag="27")]
-    pub common_lb_config: ::core::option::Option<cluster::CommonLbConfig>,
+    pub common_lb_config: ::core::option::Option<cluster_::CommonLbConfig>,
     /// Optional custom transport socket implementation to use for upstream connections.
     /// To setup TLS, set a transport socket with name `tls` and
     /// :ref:`UpstreamTlsContexts <envoy_api_msg_auth.UpstreamTlsContext>` in the `typed_config`.
@@ -368,7 +368,7 @@ pub struct Cluster {
     #[prost(message, optional, tag="25")]
     pub metadata: ::core::option::Option<core::Metadata>,
     /// Determines how Envoy selects the protocol used to speak to upstream hosts.
-    #[prost(enumeration="cluster::ClusterProtocolSelection", tag="26")]
+    #[prost(enumeration="cluster_::ClusterProtocolSelection", tag="26")]
     pub protocol_selection: i32,
     /// Optional options for upstream connections.
     #[prost(message, optional, tag="30")]
@@ -426,8 +426,8 @@ pub struct Cluster {
     /// of 100 would indicate that the request took the entirety of the timeout given to it.
     #[prost(bool, tag="47")]
     pub track_timeout_budgets: bool,
-    #[prost(oneof="cluster::ClusterDiscoveryType", tags="2, 38")]
-    pub cluster_discovery_type: ::core::option::Option<cluster::ClusterDiscoveryType>,
+    #[prost(oneof="cluster_::ClusterDiscoveryType", tags="2, 38")]
+    pub cluster_discovery_type: ::core::option::Option<cluster_::ClusterDiscoveryType>,
     /// Optional configuration for the load balancing algorithm selected by
     /// LbPolicy. Currently only
     /// :ref:`RING_HASH<envoy_api_enum_value_Cluster.LbPolicy.RING_HASH>` and
@@ -435,11 +435,11 @@ pub struct Cluster {
     /// has additional configuration options.
     /// Specifying ring_hash_lb_config or least_request_lb_config without setting the corresponding
     /// LbPolicy will generate an error at runtime.
-    #[prost(oneof="cluster::LbConfig", tags="23, 34, 37")]
-    pub lb_config: ::core::option::Option<cluster::LbConfig>,
+    #[prost(oneof="cluster_::LbConfig", tags="23, 34, 37")]
+    pub lb_config: ::core::option::Option<cluster_::LbConfig>,
 }
 /// Nested message and enum types in `Cluster`.
-pub mod cluster {
+pub mod cluster_ {
     /// TransportSocketMatch specifies what transport socket config will be used
     /// when the match conditions are satisfied.
     #[derive(Clone, PartialEq, ::prost::Message)]
@@ -1125,9 +1125,9 @@ pub struct Listener {
     pub metadata: ::core::option::Option<core::Metadata>,
     /// \[#not-implemented-hide:\]
     #[prost(message, optional, tag="7")]
-    pub deprecated_v1: ::core::option::Option<listener::DeprecatedV1>,
+    pub deprecated_v1: ::core::option::Option<listener_::DeprecatedV1>,
     /// The type of draining to perform at a listener-wide level.
-    #[prost(enumeration="listener::DrainType", tag="8")]
+    #[prost(enumeration="listener_::DrainType", tag="8")]
     pub drain_type: i32,
     /// Listener filters have the opportunity to manipulate and augment the connection metadata that
     /// is used in connection filter chain matching, for example. These filters are run before any in
@@ -1234,7 +1234,7 @@ pub struct Listener {
     /// If no configuration is specified, Envoy will not attempt to balance active connections between
     /// worker threads.
     #[prost(message, optional, tag="20")]
-    pub connection_balance_config: ::core::option::Option<listener::ConnectionBalanceConfig>,
+    pub connection_balance_config: ::core::option::Option<listener_::ConnectionBalanceConfig>,
     /// When this flag is set to true, listeners set the *SO_REUSEPORT* socket option and
     /// create one socket for each worker thread. This makes inbound connections
     /// distribute among worker threads roughly evenly in cases where there are a high number
@@ -1253,7 +1253,7 @@ pub struct Listener {
     pub access_log: ::prost::alloc::vec::Vec<super::super::config::filter::accesslog::v2::AccessLog>,
 }
 /// Nested message and enum types in `Listener`.
-pub mod listener {
+pub mod listener_ {
     /// \[#not-implemented-hide:\]
     #[derive(Clone, PartialEq, ::prost::Message)]
     pub struct DeprecatedV1 {
diff --git a/gen/envoy.config.common.dynamic_forward_proxy.v2alpha.rs b/gen/envoy.config.common.dynamic_forward_proxy.v2alpha.rs
index 593e387..d596005 100644
--- a/gen/envoy.config.common.dynamic_forward_proxy.v2alpha.rs
+++ b/gen/envoy.config.common.dynamic_forward_proxy.v2alpha.rs
@@ -21,7 +21,7 @@ pub struct DnsCacheConfig {
     /// likely build a "happy eyeballs" connection pool which would race the primary / fall back
     /// address and return the one that wins. This same method could potentially also be used for
     /// QUIC to TCP fall back.]
-    #[prost(enumeration="super::super::super::super::api::v2::cluster::DnsLookupFamily", tag="2")]
+    #[prost(enumeration="super::super::super::super::api::v2::cluster_::DnsLookupFamily", tag="2")]
     pub dns_lookup_family: i32,
     /// The DNS refresh rate for currently cached DNS hosts. If not specified defaults to 60s.
     ///
@@ -62,7 +62,7 @@ pub struct DnsCacheConfig {
     /// this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
     /// not specified, the failure refresh rate defaults to the dns_refresh_rate.
     #[prost(message, optional, tag="6")]
-    pub dns_failure_refresh_rate: ::core::option::Option<super::super::super::super::api::v2::cluster::RefreshRate>,
+    pub dns_failure_refresh_rate: ::core::option::Option<super::super::super::super::api::v2::cluster_::RefreshRate>,
 }
 /// Encoded file descriptor set for the `envoy.config.common.dynamic_forward_proxy.v2alpha` package
 pub const FILE_DESCRIPTOR_SET: &[u8] = &[
diff --git a/patches/001-fix-conflict.patch b/patches/001-fix-conflict.patch
index 20655f0..eedb05a 100644
--- a/patches/001-fix-conflict.patch
+++ b/patches/001-fix-conflict.patch
@@ -1,147 +0,0 @@
-diff --color -r -u gen/envoy.api.v2.rs gen.bak/envoy.api.v2.rs
---- gen/envoy.api.v2.rs	2023-03-09 13:23:21.367451421 +0100
-+++ gen.bak/envoy.api.v2.rs	2023-03-09 13:23:11.360719297 +0100
-@@ -159,7 +159,7 @@
-     ///
-     /// [#comment:TODO(incfly): add a detailed architecture doc on intended usage.]
-     #[prost(message, repeated, tag="43")]
--    pub transport_socket_matches: ::prost::alloc::vec::Vec<cluster::TransportSocketMatch>,
-+    pub transport_socket_matches: ::prost::alloc::vec::Vec<cluster_::TransportSocketMatch>,
-     /// Supplies the name of the cluster which must be unique across all clusters.
-     /// The cluster name is used when emitting
-     /// :ref:`statistics <config_cluster_manager_cluster_stats>` if :ref:`alt_stat_name
-@@ -175,7 +175,7 @@
-     pub alt_stat_name: ::prost::alloc::string::String,
-     /// Configuration to use for EDS updates for the Cluster.
-     #[prost(message, optional, tag="3")]
--    pub eds_cluster_config: ::core::option::Option<cluster::EdsClusterConfig>,
-+    pub eds_cluster_config: ::core::option::Option<cluster_::EdsClusterConfig>,
-     /// The timeout for new network connections to hosts in the cluster.
-     #[prost(message, optional, tag="4")]
-     pub connect_timeout: ::core::option::Option<super::super::super::google::protobuf::Duration>,
-@@ -185,7 +185,7 @@
-     pub per_connection_buffer_limit_bytes: ::core::option::Option<super::super::super::google::protobuf::UInt32Value>,
-     /// The :ref:`load balancer type <arch_overview_load_balancing_types>` to use
-     /// when picking a host in the cluster.
--    #[prost(enumeration="cluster::LbPolicy", tag="6")]
-+    #[prost(enumeration="cluster_::LbPolicy", tag="6")]
-     pub lb_policy: i32,
-     /// If the service discovery type is
-     /// :ref:`STATIC<envoy_api_enum_value_Cluster.DiscoveryType.STATIC>`,
-@@ -289,7 +289,7 @@
-     /// :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>` this setting is
-     /// ignored.
-     #[prost(message, optional, tag="44")]
--    pub dns_failure_refresh_rate: ::core::option::Option<cluster::RefreshRate>,
-+    pub dns_failure_refresh_rate: ::core::option::Option<cluster_::RefreshRate>,
-     /// Optional configuration for setting cluster's DNS refresh rate. If the value is set to true,
-     /// cluster's DNS refresh rate will be set to resource record's TTL which comes from DNS
-     /// resolution.
-@@ -298,7 +298,7 @@
-     /// The DNS IP address resolution policy. If this setting is not specified, the
-     /// value defaults to
-     /// :ref:`AUTO<envoy_api_enum_value_Cluster.DnsLookupFamily.AUTO>`.
--    #[prost(enumeration="cluster::DnsLookupFamily", tag="17")]
-+    #[prost(enumeration="cluster_::DnsLookupFamily", tag="17")]
-     pub dns_lookup_family: i32,
-     /// If DNS resolvers are specified and the cluster type is either
-     /// :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>`,
-@@ -349,10 +349,10 @@
-     pub upstream_bind_config: ::core::option::Option<core::BindConfig>,
-     /// Configuration for load balancing subsetting.
-     #[prost(message, optional, tag="22")]
--    pub lb_subset_config: ::core::option::Option<cluster::LbSubsetConfig>,
-+    pub lb_subset_config: ::core::option::Option<cluster_::LbSubsetConfig>,
-     /// Common configuration for all load balancer implementations.
-     #[prost(message, optional, tag="27")]
--    pub common_lb_config: ::core::option::Option<cluster::CommonLbConfig>,
-+    pub common_lb_config: ::core::option::Option<cluster_::CommonLbConfig>,
-     /// Optional custom transport socket implementation to use for upstream connections.
-     /// To setup TLS, set a transport socket with name `tls` and
-     /// :ref:`UpstreamTlsContexts <envoy_api_msg_auth.UpstreamTlsContext>` in the `typed_config`.
-@@ -368,7 +368,7 @@
-     #[prost(message, optional, tag="25")]
-     pub metadata: ::core::option::Option<core::Metadata>,
-     /// Determines how Envoy selects the protocol used to speak to upstream hosts.
--    #[prost(enumeration="cluster::ClusterProtocolSelection", tag="26")]
-+    #[prost(enumeration="cluster_::ClusterProtocolSelection", tag="26")]
-     pub protocol_selection: i32,
-     /// Optional options for upstream connections.
-     #[prost(message, optional, tag="30")]
-@@ -426,8 +426,8 @@
-     /// of 100 would indicate that the request took the entirety of the timeout given to it.
-     #[prost(bool, tag="47")]
-     pub track_timeout_budgets: bool,
--    #[prost(oneof="cluster::ClusterDiscoveryType", tags="2, 38")]
--    pub cluster_discovery_type: ::core::option::Option<cluster::ClusterDiscoveryType>,
-+    #[prost(oneof="cluster_::ClusterDiscoveryType", tags="2, 38")]
-+    pub cluster_discovery_type: ::core::option::Option<cluster_::ClusterDiscoveryType>,
-     /// Optional configuration for the load balancing algorithm selected by
-     /// LbPolicy. Currently only
-     /// :ref:`RING_HASH<envoy_api_enum_value_Cluster.LbPolicy.RING_HASH>` and
-@@ -435,11 +435,11 @@
-     /// has additional configuration options.
-     /// Specifying ring_hash_lb_config or least_request_lb_config without setting the corresponding
-     /// LbPolicy will generate an error at runtime.
--    #[prost(oneof="cluster::LbConfig", tags="23, 34, 37")]
--    pub lb_config: ::core::option::Option<cluster::LbConfig>,
-+    #[prost(oneof="cluster_::LbConfig", tags="23, 34, 37")]
-+    pub lb_config: ::core::option::Option<cluster_::LbConfig>,
- }
- /// Nested message and enum types in `Cluster`.
--pub mod cluster {
-+pub mod cluster_ {
-     /// TransportSocketMatch specifies what transport socket config will be used
-     /// when the match conditions are satisfied.
-     #[derive(Clone, PartialEq, ::prost::Message)]
-@@ -1125,9 +1125,9 @@
-     pub metadata: ::core::option::Option<core::Metadata>,
-     /// \[#not-implemented-hide:\]
-     #[prost(message, optional, tag="7")]
--    pub deprecated_v1: ::core::option::Option<listener::DeprecatedV1>,
-+    pub deprecated_v1: ::core::option::Option<listener_::DeprecatedV1>,
-     /// The type of draining to perform at a listener-wide level.
--    #[prost(enumeration="listener::DrainType", tag="8")]
-+    #[prost(enumeration="listener_::DrainType", tag="8")]
-     pub drain_type: i32,
-     /// Listener filters have the opportunity to manipulate and augment the connection metadata that
-     /// is used in connection filter chain matching, for example. These filters are run before any in
-@@ -1234,7 +1234,7 @@
-     /// If no configuration is specified, Envoy will not attempt to balance active connections between
-     /// worker threads.
-     #[prost(message, optional, tag="20")]
--    pub connection_balance_config: ::core::option::Option<listener::ConnectionBalanceConfig>,
-+    pub connection_balance_config: ::core::option::Option<listener_::ConnectionBalanceConfig>,
-     /// When this flag is set to true, listeners set the *SO_REUSEPORT* socket option and
-     /// create one socket for each worker thread. This makes inbound connections
-     /// distribute among worker threads roughly evenly in cases where there are a high number
-@@ -1253,7 +1253,7 @@
-     pub access_log: ::prost::alloc::vec::Vec<super::super::config::filter::accesslog::v2::AccessLog>,
- }
- /// Nested message and enum types in `Listener`.
--pub mod listener {
-+pub mod listener_ {
-     /// \[#not-implemented-hide:\]
-     #[derive(Clone, PartialEq, ::prost::Message)]
-     pub struct DeprecatedV1 {
-diff --color -r -u gen/envoy.config.common.dynamic_forward_proxy.v2alpha.rs gen.bak/envoy.config.common.dynamic_forward_proxy.v2alpha.rs
---- gen/envoy.config.common.dynamic_forward_proxy.v2alpha.rs	2023-03-09 13:23:21.364118066 +0100
-+++ gen.bak/envoy.config.common.dynamic_forward_proxy.v2alpha.rs	2023-03-09 13:23:11.354052587 +0100
-@@ -21,7 +21,7 @@
-     /// likely build a "happy eyeballs" connection pool which would race the primary / fall back
-     /// address and return the one that wins. This same method could potentially also be used for
-     /// QUIC to TCP fall back.]
--    #[prost(enumeration="super::super::super::super::api::v2::cluster::DnsLookupFamily", tag="2")]
-+    #[prost(enumeration="super::super::super::super::api::v2::cluster_::DnsLookupFamily", tag="2")]
-     pub dns_lookup_family: i32,
-     /// The DNS refresh rate for currently cached DNS hosts. If not specified defaults to 60s.
-     ///
-@@ -62,7 +62,7 @@
-     /// this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
-     /// not specified, the failure refresh rate defaults to the dns_refresh_rate.
-     #[prost(message, optional, tag="6")]
--    pub dns_failure_refresh_rate: ::core::option::Option<super::super::super::super::api::v2::cluster::RefreshRate>,
-+    pub dns_failure_refresh_rate: ::core::option::Option<super::super::super::super::api::v2::cluster_::RefreshRate>,
- }
- /// Encoded file descriptor set for the `envoy.config.common.dynamic_forward_proxy.v2alpha` package
- pub const FILE_DESCRIPTOR_SET: &[u8] = &[
